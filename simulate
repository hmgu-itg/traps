#!/usr/bin/env Rscript
library("optparse")
library(data.table)
library(this.path)
options(warn=1)
calldir=dirname(this.path())
check_anc_distr=function(anc.distr){
    if(length(anc.distr)==1){
        if(anc.distr>1 | anc.distr<0){stop(paste("Proportion of Europeans (",anc.distr,") is out of bounds."))}
        eur=anc.distr
        anc.distr=rep((1-anc.distr)/4, 4)
        anc.distr=c(anc.distr[1:3], eur, anc.distr[4])
    }
    else{
        if(sum(anc.distr)!=1 | any(anc.distr>1) | any(anc.distr<0) |length(anc.distr)!=5){
            stop(paste("Ancestry distribution should be a vector of 5 probabilities summing to 1.\nYou provided",
                      paste(anc.distr, collapse=" + "), "=", sum(anc.distr)))
        }
    }
    return(anc.distr)
}

sim_genos= function(af, n){
    genos=as.data.table(t(as.data.table(lapply(unlist(af), function(x){
        p=x;
        q=1-x;
        sample(0:2, n, prob=c(q*q, 2*p*q, p*p), replace=T)}))))
    sgenos=genos[,lapply(.SD, function(x){(x-2*af)/sqrt(2*af*(1-af))})]
    return(list(genos, sgenos))
}

inform=function(...){
    cat(paste("[INFO]", ..., "\n", collapse=" "))
    flush.console()
}

simulate_pointnormal=function(n.variants, her, n.samples, prop.heter, anc.distr, outfn){
    TOTNUMPOP=5
    anc.distr=check_anc_distr(anc.distr)
    if(her>1 | her <= 0){stop(paste("Heritability (", her, ") is out of bounds."))}
    if(prop.heter>1 | prop.heter < 0){stop(paste("Proportion of heterogeneous effect sizes (", prop.heter, ") is out of bounds."))}
    if(n.variants <= 0){stop(paste("Number of variants (", n.variants, ") is negative or null."))}
    if(n.samples <= 0){stop(paste("Number of samples (", n.variants, ") is negative or null."))}

    M.snp.het=n.variants*prop.heter
    if(M.snp.het%%1 != 0){
      #the proportion does not yield int number of SNPs, we change it to the closest divisor
      newM=round(M.snp.het)
      prop.heter=newM/n.variants
      inform("Warning: the proportions selected produce", M.snp.het, "variants. Using prop heter =", prop.heter, "instead, giving", newM)
      M.snp.het=newM
    }


    # the real number of variants we will need
    M=round((1-prop.heter+TOTNUMPOP*prop.heter)*n.variants)
    inform("Simulating", M, "variants given number of causal variants", n.variants, "and proportion heterogeneous", prop.heter)

    inform("Reading 1000 Genomes frequencies and sampling randomly ...")
    kgfreq=fread(paste0(calldir, "/1000GP_Phase3_freq.txt"))
    kgfreq=as.matrix(kgfreq)
    kgfreq[kgfreq>0.5]=1-kgfreq[kgfreq>0.5]
    kgfreq=as.data.table(kgfreq)
    toselect=sample(nrow(kgfreq), M)
    inform("Done (", M, ").")

    # the first (1-p)n SNPs will be non-heterogeneous
    M.snp.hom=round((1-prop.heter)*n.variants)
    snp.hom=toselect[1:M.snp.hom]
        POPPERSUP=ncol(kgfreq)/TOTNUMPOP
    afcoef=rep(anc.distr/POPPERSUP, each=POPPERSUP)
    #snp.hom.maf=apply(kgfreq[snp.hom], 1, mean)
    snp.hom.maf=apply(kgfreq[snp.hom], 1, function(x){sum(afcoef*x)})

    # pointnormal effect sizes
    betas.homogenous.norm=rnorm(M.snp.hom)
    sum.beta2=sum(betas.homogenous.norm*betas.homogenous.norm)
    coef=sqrt((1-prop.heter)*her/sum.beta2)
    betas.homogenous.norm=coef*betas.homogenous.norm

    #lognormal effect sizes
    ln.sigma=0.8
    ln.mu=-log10(M.snp.hom)
    ln.beta2=10^(rnorm(M.snp.hom, mean=ln.mu-ln.sigma*ln.sigma, sd=ln.sigma))
    ln.beta2=ln.beta2*(1-prop.heter)*her/sum(ln.beta2)
    beta.ln=sqrt(ln.beta2)*sample(c(1,-1), M.snp.hom,replace=T)
    #inform(var(betas.homogenous.norm)*M.snp.hom)
    #inform(mean(betas.homogenous.norm))
    all.snp.maf=snp.hom.maf
    all.snp.beta=betas.homogenous.norm
    beta.ln.hom=beta.ln
    all.snp.beta.ln=beta.ln

    POPPERSUP=ncol(kgfreq)/TOTNUMPOP
    beta.matrix=NULL
    beta.matrix.ln=NULL
    for(i in 0:(TOTNUMPOP-1)){
    snp.het=numeric(0)
    if(M.snp.het>0){
      snp.het=toselect[M.snp.hom+(1:M.snp.het)]
    }
    snp.het.maf=apply(kgfreq[snp.het,(POPPERSUP*i+1):(POPPERSUP*(i+1))], 1, mean)

    #pointnormal model
    betas.het.norm=rnorm(M.snp.het)
    sum.beta2=sum(betas.het.norm*betas.het.norm)
    coef=sqrt(prop.heter*her/sum.beta2)
    betas.het.norm=coef*betas.het.norm

    ## lognormal model
    ln.mu=-log10(M.snp.het)
    ln.beta2=10^(rnorm(M.snp.het, mean=ln.mu-ln.sigma*ln.sigma, sd=ln.sigma))
    ln.beta2=ln.beta2*prop.heter*her/sum(ln.beta2)
    beta.ln=sqrt(ln.beta2)*sample(c(1,-1), M.snp.het,replace=T)
    beta.ln.het=beta.ln

    all.snp.maf=c(all.snp.maf, snp.het.maf)
    all.snp.beta=c(all.snp.beta, betas.het.norm)
    all.snp.beta.ln=c(all.snp.beta.ln, beta.ln)

    inform("Simulation for populations",POPPERSUP*i+1 ,"to",POPPERSUP*(i+1),"\t: Mean",
           mean(c(betas.homogenous.norm, betas.het.norm)), "\ttotal heritability explained (pointnormal):", var(c(betas.homogenous.norm, betas.het.norm))*n.variants)
    inform("Simulation for populations",POPPERSUP*i+1 ,"to",POPPERSUP*(i+1),"\t: Mean",
                  mean(all.snp.beta.ln), "\ttotal heritability explained (lognormal):", var(all.snp.beta.ln)*n.variants)

    betavec=c(betas.homogenous.norm, rep(0, M.snp.het*i), betas.het.norm, rep(0,M.snp.het*(TOTNUMPOP-1-i)))
    betavec.ln=c(beta.ln.hom, rep(0, M.snp.het*i), beta.ln.het, rep(0,M.snp.het*(TOTNUMPOP-1-i)))
    if(is.null(beta.matrix)){beta.matrix=data.table(betavec)}else{
        beta.matrix=cbind(beta.matrix, betavec)
        }
    
    beta.allelic=setDT(lapply(beta.matrix, function(x){x/sqrt(2*all.snp.maf*(1-all.snp.maf))}))
    beta.matrix=as.matrix(beta.matrix)

    if(is.null(beta.matrix.ln)){beta.matrix.ln=data.table(betavec.ln)}else{
        beta.matrix.ln=cbind(beta.matrix.ln, betavec.ln)
        }
    
    
    beta.allelic.ln=setDT(lapply(beta.matrix.ln, function(x){x/sqrt(2*all.snp.maf*(1-all.snp.maf))}))
    beta.matrix.ln=as.matrix(beta.matrix.ln)
    }

    out=NULL
    gi=NULL
    gi.ln=NULL
    ph=NULL;
    ph.ln=NULL
    for(i in 1:ncol(beta.matrix)){
        ## total number per ancestry group
        tosimulate=anc.distr[i]*n.samples
        ## equal number of samples per pop within group
        perpop=tosimulate/POPPERSUP
        gc()
        genos=lapply(kgfreq[toselect,(POPPERSUP*(i-1)+1):(POPPERSUP*i)], function(y){sim_genos(y, perpop)})
        sgenos=setDT(unlist(lapply(genos, `[[`, 2), recursive = FALSE))
        g=as.numeric(lapply(sgenos, function(x){sum(x*beta.matrix[,i])}))
        g.ln=as.numeric(lapply(sgenos, function(x){sum(x*beta.matrix.ln[,i])}))
        out=c(out, genos)
        gi=c(gi,g)
        gi.ln=c(gi.ln,g.ln)
        inform("variance in the genetic component of the phenotype for ancestry group",i,"(pointnormal) is", var(g), ", should be equal to heritability.")
        inform("variance in the genetic component of the phenotype for ancestry group",i,"(lognormal) is", var(g.ln), ", should be equal to heritability.")
        phi=g+rnorm(length(g), mean=0, sd=sqrt(1-(var(g))))
        phi.ln=g.ln+rnorm(length(g.ln), mean=0, sd=sqrt(1-(var(g.ln))))
        inform("Variance of the simulated phenotype for ancestry group",i,"(pointnormal) is", var(phi), "which should be close to 1.")
        inform("Variance of the simulated phenotype for ancestry group",i,"(lognormal) is", var(phi.ln), "which should be close to 1.")
        ph=c(ph,phi)
        ph.ln=c(ph.ln, phi.ln)

    }
    gc()

    sampperpop=as.numeric(lapply(out, function(x){ncol(x[[1]])}))
    sgenos=setDT(unlist(lapply(out, `[[`, 2), recursive = FALSE))
    genos=setDT(unlist(lapply(out, `[[`, 1), recursive = FALSE))
    snpnames=paste0("rs", 1:nrow(genos))
    snames=paste("SAMPLE", unlist(lapply(sampperpop, function(x){1:x})), rep(colnames(kgfreq), sampperpop), sep=".")
    setnames(genos, snames)
    genotype.table=c("A\tA", "A\tG", "G\tG")
    genos[,(snames) := lapply(.SD, function(x){genotype.table[x+1]})]
    genos=data.table(CHR=sample(1:22, nrow(genos), replace=T), SNP=snpnames, CM=rep(0, nrow(genos)), POS=sample(1:10000000, nrow(genos)), genos)
    inform("Writing tped...")
    fwrite(genos, paste0(outfn, ".tped"), sep="\t", col.names=F, quote=F)
    inform("Writing tfam (pointnormal)...")
    fwrite(
        data.table(FID=snames,
                   IID=snames,
                   rep(0, length(snames)),
                   rep(0, length(snames)),
                   sample(1:2, length(snames), replace=T),
                   ph), paste0(outfn, ".pn.tfam"), sep="\t", col.names=F, quote=F)
     inform("Writing tfam (lognormal)...")
     fwrite(
         data.table(FID=snames,
                    IID=snames,
                    rep(0, length(snames)),
                    rep(0, length(snames)),
                    sample(1:2, length(snames), replace=T),
                    ph.ln), paste0(outfn, ".ln.tfam"), sep="\t", col.names=F, quote=F)
    inform("Done.")
    inform("Writing betas...")
    print(head(toselect))
    print(head(kgfreq))
    save(snpnames, beta.matrix, beta.matrix.ln, beta.allelic, beta.allelic.ln, kgfreq, toselect, M.snp.hom, M.snp.het, file = paste0(outfn, ".beta.rdata"))
    gc()
    inform ("Repeating for an equal number of test samples...")
    out=NULL
    gi=NULL
    ph=NULL
    pp.towrite=NULL
    popdict=c("AFR", "AMR", "EAS", "EUR", "SAS")
    for(i in 1:ncol(beta.matrix)){
        ## total number per ancestry group
        tosimulate=anc.distr[i]*n.samples
        ## equal number of samples per pop within group
        perpop=tosimulate/POPPERSUP
        pp.towrite=c(pp.towrite, perpop)
        names(pp.towrite)[length(pp.towrite)]=popdict[i]
        gc()
        genos=lapply(kgfreq[toselect,(POPPERSUP*(i-1)+1):(POPPERSUP*i)], function(y){sim_genos(y, perpop)})
        sgenos=setDT(unlist(lapply(genos, `[[`, 2), recursive = FALSE))
        g=as.numeric(lapply(sgenos, function(x){sum(x*beta.matrix[,i])}))
        g.ln=as.numeric(lapply(sgenos, function(x){sum(x*beta.matrix.ln[,i])}))

        out=c(out, genos)
        gi=c(gi,g)
        gi.ln=c(gi.ln,g.ln)

        inform("variance in the genetic component of the phenotype for ancestry group",i,"is", var(g), ", should be equal to heritability.")
        inform("variance in the genetic component of the phenotype for ancestry group",i,"(lognormal) is", var(g.ln), ", should be equal to heritability.")

        phi=g+rnorm(length(g), mean=0, sd=sqrt(1-(var(g))))
        phi.ln=g.ln+rnorm(length(g.ln), mean=0, sd=sqrt(1-(var(g.ln))))

        inform("Variance of the simulated phenotype for ancestry group",i,"(pointnormal) is", var(phi), "which should be close to 1.")
        inform("Variance of the simulated phenotype for ancestry group",i,"(lognormal) is", var(phi.ln), "which should be close to 1.")

        ph=c(ph,phi)
        ph.ln=c(ph.ln, phi.ln)

    }
    fwrite(setDT(as.list(pp.towrite))[], "popsamples.txt", quote=F)
    gc()
    sampperpop=as.numeric(lapply(out, function(x){ncol(x[[1]])}))
    sgenos=setDT(unlist(lapply(out, `[[`, 2), recursive = FALSE))
    genos=setDT(unlist(lapply(out, `[[`, 1), recursive = FALSE))
    snames=paste("SAMPLE", unlist(lapply(sampperpop, function(x){1:x})), rep(colnames(kgfreq), sampperpop), sep=".")
    setnames(genos, snames)
    genotype.table=c("A\tA", "A\tG", "G\tG")
    genos[,(snames) := lapply(.SD, function(x){genotype.table[x+1]})]
    genos=data.table(CHR=sample(1:22, nrow(genos), replace=T), SNP=snpnames, CM=rep(0, nrow(genos)), POS=sample(1:10000000, nrow(genos)), genos)
    inform("Writing tped...")
    fwrite(genos, paste0(outfn, ".target.tped"), sep="\t", col.names=F, quote=F)
    inform("Writing tfam...")
    fwrite(
        data.table(FID=snames,
                   IID=snames,
                   rep(0, length(snames)),
                   rep(0, length(snames)),
                   sample(1:2, length(snames), replace=T),
                   ph), paste0(outfn, ".target.pn.tfam"), sep="\t", col.names=F, quote=F)
                   inform("Writing tfam (lognormal)...")
   fwrite(
       data.table(FID=snames,
                  IID=snames,
                  rep(0, length(snames)),
                  rep(0, length(snames)),
                  sample(1:2, length(snames), replace=T),
                  ph.ln), paste0(outfn, ".target.ln.tfam"), sep="\t", col.names=F, quote=F)

    inform("Done.")

}
option_list = list(
  make_option(c("-n", "--num-variants"), type="integer", default=NULL,
              help="Number of causal variants to simulate per cohort. The total number of variants simulated will be higher.", metavar="integer"),
  make_option(c("-r", "--heritability"), type="numeric", default=NULL,
                          help="Narrow-sense heritability of the simulated phenotype.", metavar="numeric"),
  make_option(c("-s", "--num-samples"), type="integer", default=NULL,
              help="Total number of samples to simulate.", metavar="integer"),
  make_option(c("-p", "--prop-heter"), type="numeric", default=NULL,
              help="Proportion of sites with heterogeneous effects. 1 - this proportion of variants will have the same effect across all populations.", metavar="numeric"),
  make_option(c("-a", "--anc-af-distr"), type="character", default=NULL,
              help="Comma-separated list of proportions to simulate from each ancestry group. Should be a vector of 5 probabilities and sum to 1. Alternatively, if this is only 1 probability, it is assumed to mean the proportion of EUR.", metavar="character"),
    make_option(c("-o", "--out"), type="character",
              help="output file prefix.", metavar="character")
);

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt[["num-variants"]]) |
    is.null(opt[["heritability"]]) |
    is.null(opt[["num-samples"]]) |
    is.null(opt[["prop-heter"]]) |
    is.null(opt[["anc-af-distr"]]) |
    is.null(opt[["out"]])
  ) {
  print_help(opt_parser)
  stop("All arguments are compulsory.\n", call.=FALSE)
}

ancdist=as.numeric(strsplit(opt[["anc-af-distr"]], ",", fixed=T)[[1]])

simulate_pointnormal(opt[["num-variants"]], opt[["heritability"]], opt[["num-samples"]], opt[["prop-heter"]], ancdist, opt[["out"]])
